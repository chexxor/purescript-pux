"use strict";

// module Pux

var React = (typeof require === 'function' && require('react'))
         || (typeof window === 'object' && window.React);

function reactClass(htmlSignal) {
  return React.createClass({
    componentWillMount: function () {
      var ctx = this;
      htmlSignal.subscribe(function () {
        ctx.forceUpdate();
      });
    },
    render: function () {
      return htmlSignal.get()
    }
  });
}

exports.renderToDOM = function (selector) {
  var ReactDOM = (typeof require === 'function' && require('react-dom'))
              || (typeof window === 'object' && window.ReactDOM);
  return function (htmlSignal) {
    var elem = React.createElement(reactClass(htmlSignal));
    ReactDOM.render(elem, document.querySelector(selector))
    return function () {};
  };
};

exports.renderToString = function (htmlSignal) {
  var ReactDOMServer = (typeof require === 'function' && require('react-dom/server'))
                    || (typeof window === 'object' && window.ReactDOMServer);
  var elem = React.createElement(reactClass(htmlSignal));
  return function () {
    return ReactDOMServer.renderToString(elem);
  };
};

exports.toReact = function (htmlSignal) {
  return function () {
    return reactClass(htmlSignal);
  };
};

exports.fromReact = function (comp) {
  return function (attrs) {
    return function (children) {
      if (Array.isArray(children[0])) children = children[0];

      var props = attrs.reduce(function (obj, attr) {
        var key = attr[0];
        var val = attr[1];
        obj[key] = val;
        return obj;
      }, {});

      return React.createElement.apply(null, [comp, props].concat(children))
    };
  };
};

// Render a Pux element tree as a reactDOM element tree.
// `input` is where you send actions generated by the DOM.
// `parentAction` is
// `html` is the Pux element tree to render into reactDOM.
exports.formatTreeForReact = function (input, html) {
  // ??? Why would html be string?
  if (typeof html === 'string') {
    html = React.createElement('div', null, html);
  }

  function puxParentAction(html) {
    return html.props && html.props.puxParentAction;
  }

  // Pass DOM event to child's action first, then pass its result to parent's action.
  function composeAction(action1, action2) {
    if (action2) {
      return function (a) {
        return action1(action2(a));
      };
    } else {
      return action1;
    }
  }

  // Format a Pux-produced React Tree to a React-compatible React Tree.
  // - Send DOM events to children before sending to parent. (or parent before child?)
  // - Change PS functions to React-compatible JS functions.
  function formatTreeForReact(input, parentAction, html) {
    var changedProps = {};

    for (var key in html.props) {
      if (key !== 'puxParentAction' && typeof html.props[key] === 'function') {
        // e.g. parentAction == AppAction { value0: LoginAction { value0: PasswordChange { value0: event}}}
        changedProps[key] = html.props[key](input, composeAction(parentAction, puxParentAction(html)));
      }
    }

    // Format children
    var formattedChildren = React.Children.map(html.props.children, function (child) {
      if (typeof child === 'string') {
        return child;
      } else {
        return formatTreeForReact(input, parentAction, child);
      }
    });

    return React.cloneElement(html, changedProps, formattedChildren);
  }

  var initialParentAction = function(a) { return a; };
  return formatTreeForReact(input, initialParentAction, html);
};
